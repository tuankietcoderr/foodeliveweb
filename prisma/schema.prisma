generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model BanAn {
  MaBanAn       String          @id(map: "PK_MABANAN") @db.Char(10)
  Loai          String?         @db.NVarChar(6)
  TrangThai     String?         @default("N'Tr?ng'", map: "DF__BanAn__TrangThai__4AB81AF0") @db.NVarChar(10)
  TenBanAn      String?         @db.NVarChar(20)
  MaCuaHang     String          @db.Char(6)
  CuaHang       CuaHang         @relation(fields: [MaCuaHang], references: [MaCuaHang], onUpdate: NoAction, map: "FK_MaBanAn_CuaHang")
  ChiTietDatBan ChiTietDatBan[]
  HoaDon        HoaDon[]
}

model ChiTietDatBan {
  MaDatBan    String    @id(map: "PK_ChiTietDatBan") @db.Char(10)
  MaBanAn     String?   @db.Char(10)
  NguoiDat    String?   @db.NVarChar(30)
  SoDienThoai String?   @db.VarChar(12)
  GhiChu      String?   @db.NVarChar(200)
  TrangThai   Int?      @db.TinyInt
  NgayDat     DateTime? @db.DateTime
  BanAn       BanAn?    @relation(fields: [MaBanAn], references: [MaBanAn], onDelete: NoAction, onUpdate: NoAction, map: "FK_ChiTietDatBan_MaBan")
}

model ChiTietDonHang {
  MaDonHang String  @db.VarChar(12)
  MaMonAn   String  @db.Char(10)
  SoLuong   Int?
  MonAn     MonAn   @relation(fields: [MaMonAn], references: [MaMonAn], onUpdate: NoAction, map: "FK_MAMONAN_ChiTietDonHang")
  DonHang   DonHang @relation(fields: [MaDonHang], references: [MaDonHang], onUpdate: NoAction, map: "FK_SoDonHang")

  @@id([MaDonHang, MaMonAn], map: "PK_SoDonHang_MAMONAN")
}

model ChiTietHoaDon {
  MaHoaDon String @db.VarChar(12)
  MaMonAn  String @db.Char(10)
  SoLuong  Int?
  MonAn    MonAn  @relation(fields: [MaMonAn], references: [MaMonAn], onUpdate: NoAction, map: "FK_MAMONAN")
  HoaDon   HoaDon @relation(fields: [MaHoaDon], references: [MaHoaDon], onUpdate: NoAction, map: "FK_SoHoaDon")

  @@id([MaHoaDon, MaMonAn], map: "PK_SoHoaDon_MAMONAN")
}

model CuaHang {
  MaCuaHang    String        @id(map: "PK_CuaHang") @db.Char(6)
  MaQuanLy     String        @db.Char(8)
  MoTa         String?       @db.NVarChar(Max)
  TenCuaHang   String?       @db.NVarChar(30)
  NgayThanhLap DateTime?     @db.DateTime
  ImgUrl       String?       @db.NVarChar(Max)
  DiaChi       String?       @db.NVarChar(200)
  BanAn        BanAn[]
  MonAn        MonAn[]
  NguoiQuanLy  NguoiQuanLy[]
}

model DonHang {
  MaDonHang      String           @id(map: "PK_SoDonHang") @db.VarChar(12)
  NgayLapDonHang DateTime?        @db.DateTime
  userId         String           @map("user_id")
  TriGia         Float?           @db.Money
  TieuDe         String?          @db.NVarChar(50)
  GhiChu         String?          @db.NVarChar(50)
  MaNV           String?          @db.Char(10)
  DiaChi         String?          @db.NVarChar(200)
  ChiTietDonHang ChiTietDonHang[]
  NhanVien       NhanVien?        @relation(fields: [MaNV], references: [MaNV], onDelete: NoAction, onUpdate: NoAction, map: "FK_MANV_DONHANG")
  User           User             @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "FK_USER_DONHANG")
}

model HoaDon {
  MaHoaDon          String          @id(map: "PK_SoHoaDon") @db.VarChar(12)
  NgayLapHoaDon     DateTime?       @db.SmallDateTime
  MaBanAn           String?         @db.Char(10)
  TriGia            Float?          @db.Money
  TrangThai         Int?            @db.TinyInt
  ThoiGianThanhToan DateTime?       @db.DateTime
  ChiTietHoaDon     ChiTietHoaDon[]
  BanAn             BanAn?          @relation(fields: [MaBanAn], references: [MaBanAn], onDelete: NoAction, onUpdate: NoAction, map: "FK_MABANAN")
}

model MonAn {
  MaMonAn        String           @id(map: "PK_MAMONAN") @db.Char(10)
  TenMonAn       String?          @db.NVarChar(60)
  Gia            Float?           @db.Money
  ImgUrl         String?          @db.NVarChar(Max)
  MaCuaHang      String           @db.Char(6)
  ChiTietDonHang ChiTietDonHang[]
  ChiTietHoaDon  ChiTietHoaDon[]
  CuaHang        CuaHang          @relation(fields: [MaCuaHang], references: [MaCuaHang], onUpdate: NoAction, map: "FK_MaMonAn_CuaHang")
}

model NguoiQuanLy {
  MaQuanLy     String     @id(map: "PK_NguoiQuanLy") @db.Char(8)
  MaCuaHang    String     @db.Char(6)
  TenQuanLy    String?    @db.NVarChar(30)
  SoDienThoai  String?    @db.VarChar(12)
  TenNguoiDung String?    @unique(map: "UQ__NguoiQua__57E5A81D1FAD7BE8") @db.VarChar(20)
  MatKhau      String?    @db.VarChar(30)
  DiaChi       String?    @db.NVarChar(Max)
  NgayThamGia  DateTime?  @db.DateTime
  ImgUrl       String?    @db.NVarChar(Max)
  GioiTinh     String?    @db.NVarChar(4)
  NgaySinh     DateTime?  @db.DateTime
  CuaHang      CuaHang    @relation(fields: [MaCuaHang], references: [MaCuaHang], onUpdate: NoAction, map: "FK_CuaHang")
  NhanVien     NhanVien[]
}

model NhanVien {
  MaNV         String      @id(map: "PK_NHANVIEN") @db.Char(10)
  MaCuaHang    String      @db.Char(6)
  HoTen        String?     @db.NVarChar(40)
  GioiTinh     String?     @db.NVarChar(4)
  NgaySinh     DateTime?   @db.DateTime
  DiaChi       String?     @db.NVarChar(Max)
  Luong        Float?      @db.Money
  SoDienThoai  String?     @db.VarChar(12)
  NgayVaoLam   DateTime?   @db.DateTime
  TenNguoiDung String?     @unique(map: "UQ__NhanVien__57E5A81D2390083C") @db.VarChar(20)
  MatKhau      String?     @db.VarChar(30)
  ImgUrl       String?     @db.NVarChar(Max)
  MaQuanLy     String      @db.Char(8)
  DonHang      DonHang[]
  NguoiQuanLy  NguoiQuanLy @relation(fields: [MaQuanLy], references: [MaQuanLy], onUpdate: NoAction, map: "FK_MaNhanVien_NguoiQuanLy")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  phoneNumber   String?   @map("phone_number") @db.VarChar(12)
  fullName      String?   @map("full_name") @db.NVarChar(50)
  address       String?   @db.NVarChar(200)
  accounts      Account[]
  DonHang       DonHang[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
